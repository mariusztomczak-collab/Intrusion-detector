name: Pull Request CI/CD

on:
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: "3.12"
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # Job 1: Code Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Black (code formatting check)
        run: |
          black --check --diff src/ tests/

      - name: Run isort (import sorting check)
        run: |
          isort --check-only --diff src/ tests/

      - name: Run flake8 (code quality check)
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Run mypy (type checking)
        run: |
          mypy src/ --ignore-missing-imports

  # Job 2: Unit Tests (Parallel)
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ["3.12"]
        test-suite: ["api", "ml", "ui", "core"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server postgresql-client

      - name: Start Redis
        run: |
          sudo systemctl start redis-server
          redis-cli ping

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest-xdist pytest-cov

      - name: Create sample model for testing
        run: |
          python scripts/create_sample_model.py

      - name: Set environment variables
        run: |
          echo "MLFLOW_TRACKING_URI=local" >> $GITHUB_ENV
          echo "SUPABASE_URL=http://localhost:54321" >> $GITHUB_ENV
          echo "SUPABASE_KEY=test-key" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/test_${{ matrix.test-suite }}.py \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html \
            --junitxml=test-results-${{ matrix.test-suite }}.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            test-results-${{ matrix.test-suite }}.xml
            htmlcov/
            coverage.xml

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint, unit-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Create sample model
        run: |
          python scripts/create_sample_model.py

      - name: Set environment variables
        run: |
          echo "MLFLOW_TRACKING_URI=local" >> $GITHUB_ENV
          echo "SUPABASE_URL=http://localhost:54321" >> $GITHUB_ENV
          echo "SUPABASE_KEY=test-key" >> $GITHUB_ENV

      - name: Run integration tests
        run: |
          pytest tests/integration/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=integration-test-results.xml \
            -v

  # Job 4: Security Scan
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        uses: python-security/bandit-action@v1
        with:
          path: src/
          level: medium
          confidence: medium

      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: safety-report.json

  # Job 5: Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint, unit-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create sample model
        run: |
          python scripts/create_sample_model.py

      - name: Build API image
        run: |
          docker build -f Dockerfile.prod -t intrusion-detector-api:pr-${{ github.event.number }} .

      - name: Build UI image
        run: |
          docker build -f Dockerfile.ui -t intrusion-detector-ui:pr-${{ github.event.number }} .

      - name: Test Docker images
        run: |
          docker run --rm intrusion-detector-api:pr-${{ github.event.number }} python -c "print('API image test passed')"
          docker run --rm intrusion-detector-ui:pr-${{ github.event.number }} python -c "print('UI image test passed')"

  # Job 6: Status Comment
  status-comment:
    name: PR Status Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, security-scan, build-docker]
    if: always() && github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate status report
        id: status-report
        run: |
          # Check job statuses
          LINT_STATUS="${{ needs.lint.result }}"
          UNIT_TESTS_STATUS="${{ needs.unit-tests.result }}"
          INTEGRATION_STATUS="${{ needs.integration-tests.result }}"
          SECURITY_STATUS="${{ needs.security-scan.result }}"
          DOCKER_STATUS="${{ needs.build-docker.result }}"

          # Determine overall status
          if [[ "$LINT_STATUS" == "success" && "$UNIT_TESTS_STATUS" == "success" && "$INTEGRATION_STATUS" == "success" && "$SECURITY_STATUS" == "success" && "$DOCKER_STATUS" == "success" ]]; then
            OVERALL_STATUS="‚úÖ All checks passed"
            EMOJI="üéâ"
          else
            OVERALL_STATUS="‚ùå Some checks failed"
            EMOJI="‚ö†Ô∏è"
          fi

          # Create detailed report
          REPORT="## $EMOJI Pull Request CI/CD Status Report

          ### Overall Status: $OVERALL_STATUS

          | Check | Status |
          |-------|--------|
          | Code Linting | ${{ needs.lint.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
          | Unit Tests | ${{ needs.unit-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
          | Integration Tests | ${{ needs.integration-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
          | Security Scan | ${{ needs.security-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
          | Docker Build | ${{ needs.build-docker.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |

          ### Coverage Report
          - Unit tests coverage: [View Coverage Report](https://codecov.io/gh/${{ github.repository }}/pull/${{ github.event.number }})

          ### Next Steps
          ${{ needs.lint.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.security-scan.result == 'success' && needs.build-docker.result == 'success' && '- ‚úÖ Ready for review and merge' || '- ‚ùå Please fix the failing checks before merging' }}

          ---
          *This report was generated automatically by GitHub Actions*"

          echo "report<<EOF" >> $GITHUB_OUTPUT
          echo "$REPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const report = `${{ steps.status-report.outputs.report }}`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Pull Request CI/CD Status Report')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: report
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }
