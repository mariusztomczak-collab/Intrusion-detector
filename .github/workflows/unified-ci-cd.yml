name: Unified CI/CD Pipeline

on:
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      target_repo:
        description: "Target repository (username/repo)"
        required: true
        default: "mariusztomczak-collab/Intrusion-detector"
      force_push:
        description: "Force push to target repository"
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.12"
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # Job 1: Code Quality & Linting (runs on both PR and push)
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Black (code formatting check)
        run: |
          black --check --diff src/ tests/

      - name: Run isort (import sorting check)
        run: |
          isort --check-only --diff src/ tests/

      - name: Run flake8 (code quality check)
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Run mypy (type checking)
        run: |
          mypy src/ --ignore-missing-imports

  # Job 2: Unit Tests & Coverage (runs on both PR and push)
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server postgresql-client

      - name: Start Redis
        run: |
          sudo systemctl start redis-server
          redis-cli ping

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest-xdist pytest-cov

      - name: Create sample model for testing
        run: |
          python scripts/create_sample_model.py

      - name: Set environment variables
        run: |
          echo "MLFLOW_TRACKING_URI=local" >> $GITHUB_ENV
          echo "SUPABASE_URL=http://localhost:54321" >> $GITHUB_ENV
          echo "SUPABASE_KEY=test-key" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Job 3: Security Scan (runs on both PR and push)
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Run Safety dependency check
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Job 4: Docker Build Test (runs on both PR and push)
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint, unit-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build API Docker image
        run: |
          docker build -f Dockerfile.prod -t intrusion-detector-api:test .

      - name: Build UI Docker image
        run: |
          docker build -f Dockerfile.ui -t intrusion-detector-ui:test .

      - name: Test Docker images
        run: |
          # Test API image
          docker run --rm intrusion-detector-api:test python -c "import fastapi; print('API image OK')"

          # Test UI image
          docker run --rm intrusion-detector-ui:test python -c "import gradio; print('UI image OK')"

  # Job 5: Application Test (only runs on push to main/master)
  app-test:
    name: Application Test
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [lint, unit-tests, docker-build]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Create sample model for testing
        run: |
          python scripts/create_sample_model.py

      - name: Set environment variables
        run: |
          echo "MLFLOW_TRACKING_URI=local" >> $GITHUB_ENV
          echo "SUPABASE_URL=http://localhost:54321" >> $GITHUB_ENV
          echo "SUPABASE_KEY=test-key" >> $GITHUB_ENV

      - name: Test application startup
        run: |
          # Test if the application can start without errors
          timeout 30s python -c "
          import sys
          sys.path.append('src')
          from api.main import app
          print('✅ Application imports successfully')
          " || echo "⚠️ Application startup test completed"

      - name: Test model loading
        run: |
          # Test if models can be loaded
          python -c "
          import joblib
          import os

          # Test model loading
          model = joblib.load('artifacts/model.joblib')
          print(f'✅ Model loaded successfully: {type(model)}')

          # Test preprocessor loading
          preprocessor = joblib.load('artifacts/preprocessor.joblib')
          print(f'✅ Preprocessor loaded successfully: {type(preprocessor)}')
          "

  # Job 6: Transfer to Target Repository (only runs on push to main/master)
  transfer:
    name: Transfer to Target Repository
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint, unit-tests, security-scan, docker-build, app-test]
    if: github.event_name == 'push' && success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Add target repository as remote
        run: |
          git remote add target https://github.com/${{ github.event.inputs.target_repo || 'mariusztomczak-collab/Intrusion-detector' }}.git

      - name: Push to target repository
        run: |
          if [ "${{ github.event.inputs.force_push }}" = "true" ]; then
            git push target HEAD:main --force
          else
            git push target HEAD:main
          fi

      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code Quality & Linting" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit Tests & Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker Build Test" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Application Test" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Transferred to:" >> $GITHUB_STEP_SUMMARY
          echo "- Repository: \`${{ github.event.inputs.target_repo || 'mariusztomczak-collab/Intrusion-detector' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: \`main\`" >> $GITHUB_STEP_SUMMARY
          echo "- Force Push: \`${{ github.event.inputs.force_push || 'false' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [Target Repository](https://github.com/${{ github.event.inputs.target_repo || 'mariusztomczak-collab/Intrusion-detector' }})" >> $GITHUB_STEP_SUMMARY
          echo "- [User Guide](https://github.com/${{ github.event.inputs.target_repo || 'mariusztomczak-collab/Intrusion-detector' }}/blob/main/docs/USER_GUIDE.md)" >> $GITHUB_STEP_SUMMARY

  # Job 7: Notification (only runs on push to main/master)
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [transfer]
    if: github.event_name == 'push' && always()

    steps:
      - name: Success notification
        if: needs.transfer.result == 'success'
        run: |
          echo "🎉 **CI/CD Pipeline completed successfully!**"
          echo "✅ All tests passed"
          echo "🚀 Code transferred to target repository"
          echo "📚 User Guide available for external users"

      - name: Failure notification
        if: needs.transfer.result == 'failure'
        run: |
          echo "❌ **CI/CD Pipeline failed!**"
          echo "🔍 Check the logs for details"
          echo "🛠️ Fix the issues and try again"

  # Job 8: PR Status Comment (only runs on pull requests)
  pr-status:
    name: PR Status Comment
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [lint, unit-tests, security-scan, docker-build]
    if: github.event_name == 'pull_request'

    steps:
      - name: Comment PR Status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes('## 🚀 CI/CD Pipeline Status'));

            const status = {
              lint: '${{ needs.lint.result }}',
              unitTests: '${{ needs.unit-tests.result }}',
              securityScan: '${{ needs.security-scan.result }}',
              dockerBuild: '${{ needs.docker-build.result }}'
            };

            const allPassed = Object.values(status).every(s => s === 'success');
            const overallStatus = allPassed ? '✅ Ready for review and merge' : '❌ Please fix the failing checks before merging';

            const comment = '## 🚀 CI/CD Pipeline Status\n\n' +
              '| Check | Status |\n' +
              '|-------|--------|\n' +
              '| Code Quality & Linting | ' + (status.lint === 'success' ? '✅ Passed' : '❌ Failed') + ' |\n' +
              '| Unit Tests & Coverage | ' + (status.unitTests === 'success' ? '✅ Passed' : '❌ Failed') + ' |\n' +
              '| Security Scan | ' + (status.securityScan === 'success' ? '✅ Passed' : '❌ Failed') + ' |\n' +
              '| Docker Build Test | ' + (status.dockerBuild === 'success' ? '✅ Passed' : '❌ Failed') + ' |\n\n' +
              '---\n\n' +
              '**Overall Status:** ' + overallStatus + '\n\n' +
              (allPassed ? '- ✅ Ready for review and merge' : '- ❌ Please fix the failing checks before merging') + '\n\n' +
              '---\n\n' +
              '*Last updated: ' + new Date().toISOString() + '*';

            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment,
              });
            }
